{"version":3,"sources":["context/provider.tsx","components/Preset.tsx","components/ZoneOverview.tsx","components/ZonesOverview.tsx","components/Installation.tsx","components/Installations.tsx","components/Home.tsx","components/Login.tsx","components/Logout.tsx","components/LoginOrLogout.tsx","components/Header.tsx","components/Device.tsx","utils/helpers.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["anonymousUser","uid","email","isAnonymous","userContextDefault","user","setUser","UserContext","createContext","UserContextProvider","children","useState","Provider","value","Preset","name","status","onPreset","power","onPowerOff","statusList","Object","keys","DeviceStatus","offValue","iconsMap","Ice","Eco","Comfort","ToggleButtonGroup","type","onChange","size","className","ToggleButton","id","icon","map","s","idx","ZoneOverview","installationId","zone","statusState","setStatusState","powerState","setPowerState","comfort","eco","temp","mode","devices","devicesCount","length","devicesList","device","to","useEffect","Accordion","defaultActiveKey","Item","eventKey","Header","Body","toString","newStatus","setZonePreset","setZonePowerOff","JSON","stringify","ZonesOverview","zones","key","Installation","installation","location","latitude","longitude","useOpenWeather","process","lat","lon","lang","unit","data","isLoading","errorMessage","missingApiKeyMessage","Alert","variant","locationLabel","unitsLabels","temperature","windSpeed","showForecast","Installations","installations","setInstallations","useContext","a","getInstallations","fetch","Home","Login","setEmail","password","setPassword","registerOnAuthStateChanged","useCallback","auth","onAuthStateChanged","currentUser","onLogin","login","console","error","onConfig","conf","init","Form","onSubmit","e","preventDefault","Control","placeholder","aria-label","target","Dropdown","as","ButtonGroup","Button","onClick","Toggle","split","Menu","FirebaseConfig","EquationConnect","RointeConnect","Logout","onLogout","logout","LoginOrLogout","Navbar","bg","expand","Container","Brand","href","Collapse","Nav","Link","NumberInput","label","step","Label","htmlFor","Col","xs","sm","lg","InputGroup","readOnly","Number","Temperature","onTemperature","Backlight","backlight","onBacklight","backlightOn","onBacklightOn","Device","useParams","setDevice","setTemp","setBacklight","setBacklightOn","setStatus","setPower","newTemperature","updateDeviceTemperature","newBacklight","setDeviceBacklight","setDeviceBacklightOn","onDeviceData","deviceData","backlight_on","onDevice","subscribeOnDeviceData","assert","database","path","deviceDataByIdPath","deviceDataRef","ref","onValue","snapshot","val","getDevice","setDevicePreset","setDevicePowerOff","temp_calc","temp_probe","library","add","fas","fab","App","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.679c98a0.chunk.js","sourcesContent":["import React, { createContext, useState, FC } from \"react\";\n\ntype User = {\n  uid: string;\n  email: string | null;\n  isAnonymous: boolean;\n};\n\ntype UserContextType = {\n  user: User;\n  setUser: (user: User) => void;\n};\n\nconst anonymousUser = {\n  uid: \"\",\n  email: null,\n  isAnonymous: true,\n};\n\nconst userContextDefault = {\n  user: anonymousUser,\n  setUser: () => {},\n};\n\nconst UserContext = createContext<UserContextType>(userContextDefault);\n\nconst UserContextProvider: FC = ({ children }) => {\n  const [user, setUser] = useState<User>(userContextDefault.user);\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport type { User };\nexport { anonymousUser, UserContext, UserContextProvider };\n","import { FC } from \"react\";\nimport { ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport { IconName } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { DeviceStatus } from \"equation-connect\";\n\ninterface PresetProps {\n  name?: string;\n  status: DeviceStatus;\n  onPreset(newStatus: DeviceStatus): void;\n  power: boolean;\n  onPowerOff(): void;\n}\n\nconst Preset: FC<PresetProps> = ({\n  name = \"options\",\n  status,\n  onPreset,\n  power,\n  onPowerOff,\n}) => {\n  const statusList = Object.keys(DeviceStatus);\n  const offValue = \"off\";\n  const onChange = (value: string) => {\n    if (value === offValue) {\n      onPowerOff();\n    } else {\n      onPreset(value as DeviceStatus);\n    }\n  };\n  const iconsMap = {\n    Ice: \"snowflake\",\n    Eco: \"leaf\",\n    Comfort: \"sun\",\n  };\n  return (\n    <ToggleButtonGroup\n      type=\"radio\"\n      name={name}\n      value={(!power && offValue) || status}\n      onChange={onChange}\n      size=\"lg\"\n      className=\"mt-2\"\n    >\n      <ToggleButton id=\"radio-off\" value={offValue}>\n        <FontAwesomeIcon icon={\"power-off\"} /> Off\n      </ToggleButton>\n      {statusList.map((s, idx) => (\n        <ToggleButton\n          key={s}\n          id={`radio-${name}-${idx}`}\n          value={DeviceStatus[s as keyof typeof DeviceStatus]}\n        >\n          <FontAwesomeIcon\n            icon={iconsMap[s as keyof typeof iconsMap] as IconName}\n          />{\" \"}\n          {s}\n        </ToggleButton>\n      ))}\n    </ToggleButtonGroup>\n  );\n};\n\nexport default Preset;\n","import { FC, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Accordion } from \"react-bootstrap\";\nimport {\n  DeviceStatus,\n  ZoneOverviewType,\n  setZonePowerOff,\n  setZonePreset,\n} from \"equation-connect\";\nimport Preset from \"./Preset\";\n\ninterface ZoneOverviewProps {\n  installationId: string;\n  zone: ZoneOverviewType;\n}\nconst ZoneOverview: FC<ZoneOverviewProps> = ({ installationId, zone }) => {\n  const [statusState, setStatusState] = useState(DeviceStatus.Comfort);\n  const [powerState, setPowerState] = useState(false);\n  const { id, name, type, comfort, eco, temp, power, mode, devices, status } =\n    zone;\n  const devicesCount = devices ? Object.keys(devices).length : 0;\n  const devicesList = devices\n    ? Object.keys(devices).map((device) => (\n        <li key={device}>\n          <Link to={`/devices/${device}`}>{device}</Link>\n        </li>\n      ))\n    : null;\n  const onPreset = (newStatus: DeviceStatus) => {\n    setZonePreset(installationId, id!, newStatus);\n    setStatusState(newStatus);\n    setPowerState(true);\n  };\n  const onPowerOff = () => {\n    setZonePowerOff(installationId, id!);\n    setPowerState(false);\n  };\n  useEffect(() => {\n    setPowerState(power);\n    setStatusState(status);\n  }, [power, status]);\n  return (\n    <Accordion className=\"mb-3\" defaultActiveKey=\"0\">\n      <Accordion.Item eventKey=\"0\">\n        <Accordion.Header>{name}</Accordion.Header>\n        <Accordion.Body>\n          <ul>\n            <li>id: {id}</li>\n            <li>temp: {temp}&deg;</li>\n            <li>type: {type}</li>\n            <li>comfort: {comfort}&deg;</li>\n            <li>eco: {eco}&deg;</li>\n            <li>temp: {temp}&deg;</li>\n            <li>power: {power.toString()}</li>\n            <li>mode: {mode}</li>\n            <li>devices: {devicesCount}</li>\n            <ul>{devicesList}</ul>\n          </ul>\n          <Preset\n            name={`options-${id}`}\n            status={statusState}\n            onPreset={onPreset}\n            power={powerState}\n            onPowerOff={onPowerOff}\n          />\n        </Accordion.Body>\n      </Accordion.Item>\n      <Accordion.Item eventKey=\"1\">\n        <Accordion.Header>Debug</Accordion.Header>\n        <Accordion.Body>\n          <pre>{JSON.stringify(zone, null, 2)}</pre>\n        </Accordion.Body>\n      </Accordion.Item>\n    </Accordion>\n  );\n};\n\nexport default ZoneOverview;\n","import React, { FC } from \"react\";\nimport ZoneOverview from \"./ZoneOverview\";\nimport { ZonesOverviewType } from \"equation-connect\";\n\ninterface ZonesOverviewProps {\n  installationId: string;\n  zones: ZonesOverviewType;\n}\n\nconst ZonesOverview: FC<ZonesOverviewProps> = ({ installationId, zones }) => (\n  <>\n    {zones &&\n      Object.keys(zones).map((key) => (\n        <ZoneOverview\n          key={key}\n          installationId={installationId}\n          zone={zones[key]}\n        />\n      ))}\n  </>\n);\n\nexport default ZonesOverview;\n","import React, { FC } from \"react\";\nimport { Accordion, Alert } from \"react-bootstrap\";\n// @ts-ignore\nimport ReactWeather, { useOpenWeather } from \"react-open-weather\";\nimport ZonesOverview from \"./ZonesOverview\";\nimport { InstallationType } from \"equation-connect\";\n\ninterface InstallationProps {\n  id: string;\n  installation: InstallationType;\n}\n\nconst Installation: FC<InstallationProps> = ({ id, installation }) => {\n  const { name, location, latitude, longitude, zones } = installation;\n  const { data, isLoading, errorMessage } = useOpenWeather({\n    key: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\n    lat: latitude.toString(),\n    lon: longitude.toString(),\n    lang: \"en\",\n    unit: \"metric\",\n  });\n  const missingApiKeyMessage = (\n    <Alert variant=\"warning\">\n      REACT_APP_OPEN_WEATHER_API_KEY environment variable missing.\n    </Alert>\n  );\n  return (\n    <div>\n      <Accordion className=\"mb-3\" defaultActiveKey=\"0\">\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header>{name}</Accordion.Header>\n          <Accordion.Body>\n            {\"REACT_APP_OPEN_WEATHER_API_KEY\" in process.env ? (\n              <ReactWeather\n                isLoading={isLoading}\n                errorMessage={errorMessage}\n                data={data}\n                lang=\"en\"\n                locationLabel={location}\n                unitsLabels={{ temperature: \"C\", windSpeed: \"Km/h\" }}\n                showForecast\n              />\n            ) : (\n              missingApiKeyMessage\n            )}\n          </Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header>Debug</Accordion.Header>\n          <Accordion.Body>\n            <pre>{JSON.stringify(installation, null, 2)}</pre>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>\n\n      <ZonesOverview installationId={id} zones={zones} />\n    </div>\n  );\n};\n\nexport default Installation;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { UserContext } from \"../context/provider\";\nimport { InstallationsType, getInstallations } from \"equation-connect\";\nimport Installation from \"./Installation\";\n\nconst Installations = (): JSX.Element => {\n  const [installations, setInstallations] = useState<InstallationsType | null>(\n    null\n  );\n  const { user } = useContext(UserContext);\n\n  useEffect(() => {\n    const fetch = async () => {\n      setInstallations(await getInstallations(user.uid));\n    };\n    fetch();\n  }, [user.uid]);\n\n  return (\n    <div>\n      {installations &&\n        Object.keys(installations).map((key) => (\n          <Installation key={key} id={key} installation={installations[key]} />\n        ))}\n    </div>\n  );\n};\n\nexport default Installations;\n","import React, { useContext } from \"react\";\nimport Installations from \"./Installations\";\nimport { UserContext } from \"../context/provider\";\n\nconst Home = (): JSX.Element => {\n  const { user } = useContext(UserContext);\n  return user.isAnonymous ? <div /> : <Installations />;\n};\n\nexport default Home;\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged, Auth } from \"firebase/auth\";\nimport { Button, ButtonGroup, Dropdown, Form } from \"react-bootstrap\";\nimport { anonymousUser, User, UserContext } from \"../context/provider\";\nimport { auth, init, login, FirebaseConfig } from \"equation-connect\";\n\nconst Login = (): JSX.Element => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const { setUser } = useContext(UserContext);\n\n  const registerOnAuthStateChanged = useCallback(\n    (auth: Auth) => {\n      onAuthStateChanged(auth, (currentUser) => {\n        const user = currentUser === null ? anonymousUser : currentUser;\n        setUser(user);\n      });\n    },\n    [setUser]\n  );\n\n  useEffect(() => {\n    registerOnAuthStateChanged(auth!);\n  }, [setUser, registerOnAuthStateChanged]);\n\n  const onEmailChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setEmail(e.target.value);\n\n  const onPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setPassword(e.target.value);\n\n  const onLogin = async () => {\n    try {\n      const user: User = await login(email, password);\n      setUser(user);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onConfig = (conf: FirebaseConfig) => {\n    const { auth } = init(conf);\n    registerOnAuthStateChanged(auth);\n  };\n\n  const onLoginClick = (e: React.MouseEvent<HTMLElement>) => onLogin();\n\n  const onFormSubmit = (e: React.FormEvent) => e.preventDefault();\n\n  return (\n    <Form className=\"d-flex\" onSubmit={onFormSubmit}>\n      <Form.Control\n        type=\"email\"\n        placeholder=\"Email\"\n        className=\"me-2\"\n        aria-label=\"Email\"\n        onChange={onEmailChange}\n      />\n      <Form.Control\n        type=\"password\"\n        placeholder=\"Password\"\n        className=\"me-2\"\n        aria-label=\"Password\"\n        onChange={onPasswordChange}\n      />\n      <Dropdown as={ButtonGroup}>\n        <Button type=\"submit\" onClick={onLoginClick}>\n          Login\n        </Button>\n\n        <Dropdown.Toggle split id=\"dropdown-split-basic\" />\n\n        <Dropdown.Menu>\n          <Dropdown.Item\n            onClick={() => onConfig(FirebaseConfig.EquationConnect)}\n          >\n            Equation Login\n          </Dropdown.Item>\n          <Dropdown.Item onClick={() => onConfig(FirebaseConfig.RointeConnect)}>\n            Rointe Login\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </Form>\n  );\n};\n\nexport default Login;\n","import React, { useContext } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { UserContext, anonymousUser } from \"../context/provider\";\nimport { logout } from \"equation-connect\";\n\nconst Logout = (): JSX.Element => {\n  const { setUser } = useContext(UserContext);\n\n  const onLogout = async () => {\n    logout();\n    setUser(anonymousUser);\n  };\n\n  const onLogoutClick = (e: React.MouseEvent<HTMLElement>) => onLogout();\n\n  return (\n    <Button type=\"submit\" onClick={onLogoutClick}>\n      Logout\n    </Button>\n  );\n};\n\nexport default Logout;\n","import React, { useContext } from \"react\";\nimport { UserContext } from \"../context/provider\";\nimport Login from \"./Login\";\nimport Logout from \"./Logout\";\n\nconst LoginOrLogout = (): JSX.Element => {\n  const { user } = useContext(UserContext);\n  return user.isAnonymous ? <Login /> : <Logout />;\n};\n\nexport default LoginOrLogout;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\nimport LoginOrLogout from \"./LoginOrLogout\";\n\nconst Header = (): JSX.Element => (\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\n    <Container>\n      <Navbar.Brand href={process.env.PUBLIC_URL}>\n        <FontAwesomeIcon icon={[\"fas\", \"thermometer-three-quarters\"]} />{\" \"}\n        Equation Connect\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"https://github.com/AndreMiras/equation-connect\">\n            <FontAwesomeIcon icon={[\"fab\", \"github-alt\"]} /> About\n          </Nav.Link>\n        </Nav>\n        <LoginOrLogout />\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Header;\n","import { strict as assert } from \"assert\";\nimport { useCallback, useEffect, useState, FC } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Accordion, Button, Col, Form, InputGroup } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ref, onValue } from \"firebase/database\";\nimport {\n  DeviceStatus,\n  DeviceType,\n  database,\n  deviceDataByIdPath,\n  getDevice,\n  setDevicePowerOff,\n  setDevicePreset,\n  setDeviceBacklight,\n  setDeviceBacklightOn,\n  updateDeviceTemperature,\n} from \"equation-connect\";\nimport Preset from \"./Preset\";\n\ninterface NumberInputProps {\n  value: number;\n  onChange(newValue: number): void;\n  label?: string;\n  step: number;\n}\n\nconst NumberInput: FC<NumberInputProps> = ({\n  value,\n  onChange,\n  label,\n  step,\n}) => (\n  <>\n    {label ?? <Form.Label htmlFor=\"input\">{label}</Form.Label>}\n    <Col xs={8} sm={5} lg={3}>\n      <InputGroup size=\"lg\">\n        <Button onClick={() => onChange(value - step)}>\n          <FontAwesomeIcon icon={\"minus\"} />\n        </Button>\n        <Form.Control\n          id=\"input\"\n          value={value}\n          type=\"number\"\n          readOnly\n          onChange={(value) => onChange(Number(value))}\n        />\n        <Button onClick={() => onChange(value + step)}>\n          <FontAwesomeIcon icon={\"plus\"} />\n        </Button>\n      </InputGroup>\n    </Col>\n  </>\n);\n\ninterface TemperatureProps {\n  temp: number;\n  onTemperature(newTemperature: number): void;\n}\n\nconst Temperature: FC<TemperatureProps> = ({ temp, onTemperature }) => (\n  <Form className=\"row\">\n    <NumberInput value={temp} onChange={onTemperature} step={0.5} />\n  </Form>\n);\n\ninterface BacklightProps {\n  backlight: number;\n  onBacklight(newBacklight: number): void;\n  backlightOn: number;\n  onBacklightOn(newBacklightOn: number): void;\n}\n\nconst Backlight: FC<BacklightProps> = ({\n  backlight,\n  onBacklight,\n  backlightOn,\n  onBacklightOn,\n}) => {\n  return (\n    <Form>\n      <NumberInput\n        value={backlight}\n        onChange={onBacklight}\n        label=\"Backlight\"\n        step={1}\n      />\n      <NumberInput\n        value={backlightOn}\n        onChange={onBacklightOn}\n        label=\"Backlight on\"\n        step={1}\n      />\n    </Form>\n  );\n};\n\nconst Device = (): JSX.Element => {\n  const { id } = useParams<\"id\">();\n  const [device, setDevice] = useState<DeviceType | null>(null);\n  const [temp, setTemp] = useState(0);\n  const [backlight, setBacklight] = useState(0);\n  const [backlightOn, setBacklightOn] = useState(0);\n  const [status, setStatus] = useState(DeviceStatus.Comfort);\n  const [power, setPower] = useState(false);\n  const onTemperature = useCallback(\n    (newTemperature: number) => {\n      if (newTemperature === temp) return;\n      setTemp(newTemperature);\n      updateDeviceTemperature(id!, newTemperature);\n    },\n    [id, temp]\n  );\n  const onBacklight = useCallback(\n    (newBacklight: number) => {\n      if (newBacklight === backlight) return;\n      setBacklight(newBacklight);\n      setDeviceBacklight(id!, newBacklight);\n    },\n    [id, backlight]\n  );\n  const onBacklightOn = useCallback(\n    (newBacklight: number) => {\n      if (newBacklight === backlightOn) return;\n      setBacklightOn(newBacklight);\n      setDeviceBacklightOn(id!, newBacklight);\n    },\n    [id, backlightOn]\n  );\n  const onDeviceData = useCallback((deviceData) => {\n    const { backlight, backlight_on, temp, status, power } = deviceData;\n    setTemp(temp);\n    setBacklight(backlight);\n    setBacklightOn(backlight_on);\n    setStatus(status);\n    setPower(power);\n  }, []);\n  const onDevice = useCallback(\n    (device: DeviceType) => {\n      setDevice(device);\n      onDeviceData(device.data);\n    },\n    [onDeviceData]\n  );\n  const onPreset = (newStatus: DeviceStatus) => {\n    setDevicePreset(id!, newStatus);\n    setStatus(newStatus);\n    setPower(true);\n  };\n  const onPowerOff = () => {\n    setDevicePowerOff(id!);\n    setPower(false);\n  };\n  const subscribeOnDeviceData = useCallback(() => {\n    assert(database);\n    const path = deviceDataByIdPath(id!);\n    const deviceDataRef = ref(database, path);\n    onValue(deviceDataRef, (snapshot) => {\n      const deviceData = snapshot.val();\n      onDeviceData(deviceData);\n    });\n  }, [id, onDeviceData]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      onDevice(await getDevice(id!));\n    };\n    fetch();\n    subscribeOnDeviceData();\n  }, [onDevice, subscribeOnDeviceData, id]);\n\n  return device === null ? (\n    <div />\n  ) : (\n    <Accordion className=\"mb-3\" defaultActiveKey=\"0\">\n      <Accordion.Item eventKey=\"0\">\n        <Accordion.Header>{device.data.name}</Accordion.Header>\n        <Accordion.Body>\n          <Temperature temp={temp} onTemperature={onTemperature} />\n          <Preset\n            status={status}\n            onPreset={onPreset}\n            power={power}\n            onPowerOff={onPowerOff}\n          />\n        </Accordion.Body>\n      </Accordion.Item>\n      <Accordion.Item eventKey=\"1\">\n        <Accordion.Header>Advanced</Accordion.Header>\n        <Accordion.Body>\n          <ul>\n            <li>id: {id}</li>\n            <li>temp_calc: {device.data.temp_calc}&deg;</li>\n            <li>temp_probe: {device.data.temp_probe}&deg;</li>\n          </ul>\n          <Backlight\n            backlight={backlight}\n            onBacklight={onBacklight}\n            backlightOn={backlightOn}\n            onBacklightOn={onBacklightOn}\n          />\n        </Accordion.Body>\n      </Accordion.Item>\n      <Accordion.Item eventKey=\"2\">\n        <Accordion.Header>Debug</Accordion.Header>\n        <Accordion.Body>\n          <pre>{JSON.stringify(device, null, 2)}</pre>\n        </Accordion.Body>\n      </Accordion.Item>\n    </Accordion>\n  );\n};\n\nexport default Device;\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\n\nconst registerIcons = () => library.add(fas, fab);\n\nexport { registerIcons };\n","import React from \"react\";\nimport { HashRouter as Router, Route, Routes } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from \"react-bootstrap\";\nimport { registerIcons } from \"./utils/helpers\";\nimport Home from \"./components/Home\";\nimport Header from \"./components/Header\";\nimport Device from \"./components/Device\";\n\nregisterIcons();\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Container className=\"mt-3\">\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"devices/:id\" element={<Device />} />\n          </Routes>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { UserContextProvider } from \"./context/provider\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserContextProvider>\n      <App />\n    </UserContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}